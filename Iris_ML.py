import numpy as npimport pandas as pdimport seaborn as snssns.set_palette('husl')import matplotlib.pyplot as pltfrom sklearn.datasets import load_irisfrom sklearn import metricsfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.cluster import KMeansfrom sklearn.linear_model import LogisticRegressionfrom sklearn.model_selection import train_test_split### Data Science Stuffdata = pd.read_csv('Iris.csv') print(data.head()) print(data.info()) print(data.describe()) g = sns.pairplot(data, hue='variety', markers='+') plt.show() g = sns.violinplot(y='variety', x='sepal.length', data=data, inner='quartile') plt.show() g = sns.violinplot(y='variety', x='sepal.width', data=data, inner='quartile') plt.show() g = sns.violinplot(y='variety', x='petal.length', data=data, inner='quartile') plt.show() g = sns.violinplot(y='variety', x='petal.width', data=data, inner='quartile') plt.show()## ML StuffX = data.drop(["variety"],axis=1)y = data["variety"]print(X.shape)print(y.shape)k_range = list(range(1,26))scores = []for k in k_range:    knn = KMeans(n_clusters=k)    knn.fit(X, y)    y_pred = knn.predict(X)    scores.append(metrics.accuracy_score(y, y_pred))plt.plot(k_range, scores)plt.xlabel('Value of k for KNN')plt.ylabel('Accuracy Score')plt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')plt.show()logreg = LogisticRegression()logreg.fit(X, y)y_pred = logreg.predict(X)print(metrics.accuracy_score(y, y_pred))## ML Split the data setX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=10)print(X_train.shape)print(y_train.shape)print(X_test.shape)print(y_test.shape)k_range = list(range(1,26))scores = []for k in k_range:    knn = KMeans(n_clusters=k)    knn.fit(X_train, y_train)    y_pred = knn.predict(X_test)    scores.append(metrics.accuracy_score(y_test, y_pred))    plt.plot(k_range, scores)plt.xlabel('Value of k for KNN')plt.ylabel('Accuracy Score')plt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')plt.show()logreg = LogisticRegression()logreg.fit(X_train, y_train)y_pred = logreg.predict(X_test)print(metrics.accuracy_score(y_test, y_pred))